// Code generated by SQLBoiler 4.6.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package entities

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UserLevelAccess is an object representing the database table.
type UserLevelAccess struct {
	LevelID     uint8  `boil:"level_id" json:"level_id" toml:"level_id" yaml:"level_id"`
	AccessID    uint8  `boil:"access_id" json:"access_id" toml:"access_id" yaml:"access_id"`
	AccessValue string `boil:"access_value" json:"access_value" toml:"access_value" yaml:"access_value"`

	R *userLevelAccessR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userLevelAccessL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserLevelAccessColumns = struct {
	LevelID     string
	AccessID    string
	AccessValue string
}{
	LevelID:     "level_id",
	AccessID:    "access_id",
	AccessValue: "access_value",
}

var UserLevelAccessTableColumns = struct {
	LevelID     string
	AccessID    string
	AccessValue string
}{
	LevelID:     "user_level_accesses.level_id",
	AccessID:    "user_level_accesses.access_id",
	AccessValue: "user_level_accesses.access_value",
}

// Generated where

var UserLevelAccessWhere = struct {
	LevelID     whereHelperuint8
	AccessID    whereHelperuint8
	AccessValue whereHelperstring
}{
	LevelID:     whereHelperuint8{field: "`user_level_accesses`.`level_id`"},
	AccessID:    whereHelperuint8{field: "`user_level_accesses`.`access_id`"},
	AccessValue: whereHelperstring{field: "`user_level_accesses`.`access_value`"},
}

// UserLevelAccessRels is where relationship names are stored.
var UserLevelAccessRels = struct {
}{}

// userLevelAccessR is where relationships are stored.
type userLevelAccessR struct {
}

// NewStruct creates a new relationship struct
func (*userLevelAccessR) NewStruct() *userLevelAccessR {
	return &userLevelAccessR{}
}

// userLevelAccessL is where Load methods for each relationship are stored.
type userLevelAccessL struct{}

var (
	userLevelAccessAllColumns            = []string{"level_id", "access_id", "access_value"}
	userLevelAccessColumnsWithoutDefault = []string{"level_id", "access_id"}
	userLevelAccessColumnsWithDefault    = []string{"access_value"}
	userLevelAccessPrimaryKeyColumns     = []string{"level_id", "access_id"}
)

type (
	// UserLevelAccessSlice is an alias for a slice of pointers to UserLevelAccess.
	// This should almost always be used instead of []UserLevelAccess.
	UserLevelAccessSlice []*UserLevelAccess
	// UserLevelAccessHook is the signature for custom UserLevelAccess hook methods
	UserLevelAccessHook func(context.Context, boil.ContextExecutor, *UserLevelAccess) error

	userLevelAccessQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userLevelAccessType                 = reflect.TypeOf(&UserLevelAccess{})
	userLevelAccessMapping              = queries.MakeStructMapping(userLevelAccessType)
	userLevelAccessPrimaryKeyMapping, _ = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, userLevelAccessPrimaryKeyColumns)
	userLevelAccessInsertCacheMut       sync.RWMutex
	userLevelAccessInsertCache          = make(map[string]insertCache)
	userLevelAccessUpdateCacheMut       sync.RWMutex
	userLevelAccessUpdateCache          = make(map[string]updateCache)
	userLevelAccessUpsertCacheMut       sync.RWMutex
	userLevelAccessUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userLevelAccessBeforeInsertHooks []UserLevelAccessHook
var userLevelAccessBeforeUpdateHooks []UserLevelAccessHook
var userLevelAccessBeforeDeleteHooks []UserLevelAccessHook
var userLevelAccessBeforeUpsertHooks []UserLevelAccessHook

var userLevelAccessAfterInsertHooks []UserLevelAccessHook
var userLevelAccessAfterSelectHooks []UserLevelAccessHook
var userLevelAccessAfterUpdateHooks []UserLevelAccessHook
var userLevelAccessAfterDeleteHooks []UserLevelAccessHook
var userLevelAccessAfterUpsertHooks []UserLevelAccessHook

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserLevelAccess) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserLevelAccess) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserLevelAccess) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserLevelAccess) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserLevelAccess) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserLevelAccess) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserLevelAccess) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserLevelAccess) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserLevelAccess) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range userLevelAccessAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserLevelAccessHook registers your hook function for all future operations.
func AddUserLevelAccessHook(hookPoint boil.HookPoint, userLevelAccessHook UserLevelAccessHook) {
	switch hookPoint {
	case boil.BeforeInsertHook:
		userLevelAccessBeforeInsertHooks = append(userLevelAccessBeforeInsertHooks, userLevelAccessHook)
	case boil.BeforeUpdateHook:
		userLevelAccessBeforeUpdateHooks = append(userLevelAccessBeforeUpdateHooks, userLevelAccessHook)
	case boil.BeforeDeleteHook:
		userLevelAccessBeforeDeleteHooks = append(userLevelAccessBeforeDeleteHooks, userLevelAccessHook)
	case boil.BeforeUpsertHook:
		userLevelAccessBeforeUpsertHooks = append(userLevelAccessBeforeUpsertHooks, userLevelAccessHook)
	case boil.AfterInsertHook:
		userLevelAccessAfterInsertHooks = append(userLevelAccessAfterInsertHooks, userLevelAccessHook)
	case boil.AfterSelectHook:
		userLevelAccessAfterSelectHooks = append(userLevelAccessAfterSelectHooks, userLevelAccessHook)
	case boil.AfterUpdateHook:
		userLevelAccessAfterUpdateHooks = append(userLevelAccessAfterUpdateHooks, userLevelAccessHook)
	case boil.AfterDeleteHook:
		userLevelAccessAfterDeleteHooks = append(userLevelAccessAfterDeleteHooks, userLevelAccessHook)
	case boil.AfterUpsertHook:
		userLevelAccessAfterUpsertHooks = append(userLevelAccessAfterUpsertHooks, userLevelAccessHook)
	}
}

// One returns a single userLevelAccess record from the query.
func (q userLevelAccessQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserLevelAccess, error) {
	o := &UserLevelAccess{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: failed to execute a one query for user_level_accesses")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UserLevelAccess records from the query.
func (q userLevelAccessQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserLevelAccessSlice, error) {
	var o []*UserLevelAccess

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "entities: failed to assign all query results to UserLevelAccess slice")
	}

	if len(userLevelAccessAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UserLevelAccess records in the query.
func (q userLevelAccessQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to count user_level_accesses rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userLevelAccessQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "entities: failed to check if user_level_accesses exists")
	}

	return count > 0, nil
}

// UserLevelAccesses retrieves all the records using an executor.
func UserLevelAccesses(mods ...qm.QueryMod) userLevelAccessQuery {
	mods = append(mods, qm.From("`user_level_accesses`"))
	return userLevelAccessQuery{NewQuery(mods...)}
}

// FindUserLevelAccess retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserLevelAccess(ctx context.Context, exec boil.ContextExecutor, levelID uint8, accessID uint8, selectCols ...string) (*UserLevelAccess, error) {
	userLevelAccessObj := &UserLevelAccess{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from `user_level_accesses` where `level_id`=? AND `access_id`=?", sel,
	)

	q := queries.Raw(query, levelID, accessID)

	err := q.Bind(ctx, exec, userLevelAccessObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "entities: unable to select from user_level_accesses")
	}

	if err = userLevelAccessObj.doAfterSelectHooks(ctx, exec); err != nil {
		return userLevelAccessObj, err
	}

	return userLevelAccessObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserLevelAccess) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no user_level_accesses provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLevelAccessColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userLevelAccessInsertCacheMut.RLock()
	cache, cached := userLevelAccessInsertCache[key]
	userLevelAccessInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userLevelAccessAllColumns,
			userLevelAccessColumnsWithDefault,
			userLevelAccessColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO `user_level_accesses` (`%s`) %%sVALUES (%s)%%s", strings.Join(wl, "`,`"), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO `user_level_accesses` () VALUES ()%s%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			cache.retQuery = fmt.Sprintf("SELECT `%s` FROM `user_level_accesses` WHERE %s", strings.Join(returnColumns, "`,`"), strmangle.WhereClause("`", "`", 0, userLevelAccessPrimaryKeyColumns))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to insert into user_level_accesses")
	}

	var identifierCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	identifierCols = []interface{}{
		o.LevelID,
		o.AccessID,
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, identifierCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, identifierCols...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for user_level_accesses")
	}

CacheNoHooks:
	if !cached {
		userLevelAccessInsertCacheMut.Lock()
		userLevelAccessInsertCache[key] = cache
		userLevelAccessInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UserLevelAccess.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserLevelAccess) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userLevelAccessUpdateCacheMut.RLock()
	cache, cached := userLevelAccessUpdateCache[key]
	userLevelAccessUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userLevelAccessAllColumns,
			userLevelAccessPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("entities: unable to update user_level_accesses, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE `user_level_accesses` SET %s WHERE %s",
			strmangle.SetParamNames("`", "`", 0, wl),
			strmangle.WhereClause("`", "`", 0, userLevelAccessPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, append(wl, userLevelAccessPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update user_level_accesses row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by update for user_level_accesses")
	}

	if !cached {
		userLevelAccessUpdateCacheMut.Lock()
		userLevelAccessUpdateCache[key] = cache
		userLevelAccessUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q userLevelAccessQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all for user_level_accesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected for user_level_accesses")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserLevelAccessSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("entities: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLevelAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE `user_level_accesses` SET %s WHERE %s",
		strmangle.SetParamNames("`", "`", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLevelAccessPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to update all in userLevelAccess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to retrieve rows affected all in update all userLevelAccess")
	}
	return rowsAff, nil
}

var mySQLUserLevelAccessUniqueColumns = []string{}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserLevelAccess) Upsert(ctx context.Context, exec boil.ContextExecutor, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("entities: no user_level_accesses provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userLevelAccessColumnsWithDefault, o)
	nzUniques := queries.NonZeroDefaultSet(mySQLUserLevelAccessUniqueColumns, o)

	if len(nzUniques) == 0 {
		return errors.New("cannot upsert with a table that cannot conflict on a unique column")
	}

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzUniques {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userLevelAccessUpsertCacheMut.RLock()
	cache, cached := userLevelAccessUpsertCache[key]
	userLevelAccessUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userLevelAccessAllColumns,
			userLevelAccessColumnsWithDefault,
			userLevelAccessColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userLevelAccessAllColumns,
			userLevelAccessPrimaryKeyColumns,
		)

		if !updateColumns.IsNone() && len(update) == 0 {
			return errors.New("entities: unable to upsert user_level_accesses, could not build update column list")
		}

		ret = strmangle.SetComplement(ret, nzUniques)
		cache.query = buildUpsertQueryMySQL(dialect, "`user_level_accesses`", update, insert)
		cache.retQuery = fmt.Sprintf(
			"SELECT %s FROM `user_level_accesses` WHERE %s",
			strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, ret), ","),
			strmangle.WhereClause("`", "`", 0, nzUniques),
		)

		cache.valueMapping, err = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	_, err = exec.ExecContext(ctx, cache.query, vals...)

	if err != nil {
		return errors.Wrap(err, "entities: unable to upsert for user_level_accesses")
	}

	var uniqueMap []uint64
	var nzUniqueCols []interface{}

	if len(cache.retMapping) == 0 {
		goto CacheNoHooks
	}

	uniqueMap, err = queries.BindMapping(userLevelAccessType, userLevelAccessMapping, nzUniques)
	if err != nil {
		return errors.Wrap(err, "entities: unable to retrieve unique values for user_level_accesses")
	}
	nzUniqueCols = queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), uniqueMap)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.retQuery)
		fmt.Fprintln(writer, nzUniqueCols...)
	}
	err = exec.QueryRowContext(ctx, cache.retQuery, nzUniqueCols...).Scan(returns...)
	if err != nil {
		return errors.Wrap(err, "entities: unable to populate default values for user_level_accesses")
	}

CacheNoHooks:
	if !cached {
		userLevelAccessUpsertCacheMut.Lock()
		userLevelAccessUpsertCache[key] = cache
		userLevelAccessUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UserLevelAccess record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserLevelAccess) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("entities: no UserLevelAccess provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userLevelAccessPrimaryKeyMapping)
	sql := "DELETE FROM `user_level_accesses` WHERE `level_id`=? AND `access_id`=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete from user_level_accesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by delete for user_level_accesses")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userLevelAccessQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("entities: no userLevelAccessQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from user_level_accesses")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for user_level_accesses")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserLevelAccessSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userLevelAccessBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLevelAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM `user_level_accesses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLevelAccessPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "entities: unable to delete all from userLevelAccess slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "entities: failed to get rows affected by deleteall for user_level_accesses")
	}

	if len(userLevelAccessAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserLevelAccess) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserLevelAccess(ctx, exec, o.LevelID, o.AccessID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserLevelAccessSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserLevelAccessSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userLevelAccessPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT `user_level_accesses`.* FROM `user_level_accesses` WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, userLevelAccessPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "entities: unable to reload all in UserLevelAccessSlice")
	}

	*o = slice

	return nil
}

// UserLevelAccessExists checks if the UserLevelAccess row exists.
func UserLevelAccessExists(ctx context.Context, exec boil.ContextExecutor, levelID uint8, accessID uint8) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from `user_level_accesses` where `level_id`=? AND `access_id`=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, levelID, accessID)
	}
	row := exec.QueryRowContext(ctx, sql, levelID, accessID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "entities: unable to check if user_level_accesses exists")
	}

	return exists, nil
}
